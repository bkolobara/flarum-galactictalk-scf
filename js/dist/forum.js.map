{"version":3,"sources":["webpack://@bkolobara/galactictalk-scf/webpack/bootstrap","webpack://@bkolobara/galactictalk-scf/external \"flarum.core.compat['extend']\"","webpack://@bkolobara/galactictalk-scf/external \"flarum.core.compat['utils/ItemList']\"","webpack://@bkolobara/galactictalk-scf/external \"flarum.core.compat['components/Button']\"","webpack://@bkolobara/galactictalk-scf/external \"flarum.core.compat['components/DiscussionList']\"","webpack://@bkolobara/galactictalk-scf/external \"flarum.core.compat['helpers/listItems']\"","webpack://@bkolobara/galactictalk-scf/external \"flarum.core.compat['components/IndexPage']\"","webpack://@bkolobara/galactictalk-scf/external \"flarum.core.compat['app']\"","webpack://@bkolobara/galactictalk-scf/external \"flarum.core.compat['Model']\"","webpack://@bkolobara/galactictalk-scf/external \"flarum.core.compat['models/Post']\"","webpack://@bkolobara/galactictalk-scf/external \"flarum.core.compat['helpers/icon']\"","webpack://@bkolobara/galactictalk-scf/external \"flarum.core.compat['components/CommentPost']\"","webpack://@bkolobara/galactictalk-scf/external \"flarum.core.compat['components/Page']\"","webpack://@bkolobara/galactictalk-scf/external \"flarum.core.compat['components/WelcomeHero']\"","webpack://@bkolobara/galactictalk-scf/external \"flarum.core.compat['components/DiscussionComposer']\"","webpack://@bkolobara/galactictalk-scf/external \"flarum.core.compat['components/LogInModal']\"","webpack://@bkolobara/galactictalk-scf/external \"flarum.core.compat['components/DiscussionPage']\"","webpack://@bkolobara/galactictalk-scf/external \"flarum.core.compat['components/Dropdown']\"","webpack://@bkolobara/galactictalk-scf/external \"flarum.core.compat['components/LinkButton']\"","webpack://@bkolobara/galactictalk-scf/external \"flarum.core.compat['components/SelectDropdown']\"","webpack://@bkolobara/galactictalk-scf/external \"flarum.core.compat['models/Discussion']\"","webpack://@bkolobara/galactictalk-scf/external \"flarum.core.compat['tags/models/Tag']\"","webpack://@bkolobara/galactictalk-scf/external \"flarum.core.compat['tags/components/DiscussionTaggedPost']\"","webpack://@bkolobara/galactictalk-scf/external \"flarum.core.compat['tags/addTagList']\"","webpack://@bkolobara/galactictalk-scf/external \"flarum.core.compat['tags/addTagFilter']\"","webpack://@bkolobara/galactictalk-scf/external \"flarum.core.compat['tags/addTagLabels']\"","webpack://@bkolobara/galactictalk-scf/external \"flarum.core.compat['tags/addTagControl']\"","webpack://@bkolobara/galactictalk-scf/external \"flarum.core.compat['tags/addTagComposer']\"","webpack://@bkolobara/galactictalk-scf/./node_modules/@babel/runtime/helpers/esm/extends.js","webpack://@bkolobara/galactictalk-scf/./src/forum/ScorePage.js","webpack://@bkolobara/galactictalk-scf/./src/forum/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","flarum","core","compat","_extends","assign","target","arguments","length","source","apply","this","Page","app","initializers","add","Post","votes","Model","attribute","likes","hasMany","extend","CommentPost","items","props","post","undefined","className","icon","DiscussionList","params","tags","size","writable","_page","set","newPage"],"mappings":"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","file":"forum.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 27);\n","module.exports = flarum.core.compat['extend'];","module.exports = flarum.core.compat['utils/ItemList'];","module.exports = flarum.core.compat['components/Button'];","module.exports = flarum.core.compat['components/DiscussionList'];","module.exports = flarum.core.compat['helpers/listItems'];","module.exports = flarum.core.compat['components/IndexPage'];","module.exports = flarum.core.compat['app'];","module.exports = flarum.core.compat['Model'];","module.exports = flarum.core.compat['models/Post'];","module.exports = flarum.core.compat['helpers/icon'];","module.exports = flarum.core.compat['components/CommentPost'];","module.exports = flarum.core.compat['components/Page'];","module.exports = flarum.core.compat['components/WelcomeHero'];","module.exports = flarum.core.compat['components/DiscussionComposer'];","module.exports = flarum.core.compat['components/LogInModal'];","module.exports = flarum.core.compat['components/DiscussionPage'];","module.exports = flarum.core.compat['components/Dropdown'];","module.exports = flarum.core.compat['components/LinkButton'];","module.exports = flarum.core.compat['components/SelectDropdown'];","module.exports = flarum.core.compat['models/Discussion'];","module.exports = flarum.core.compat['tags/models/Tag'];","module.exports = flarum.core.compat['tags/components/DiscussionTaggedPost'];","module.exports = flarum.core.compat['tags/addTagList'];","module.exports = flarum.core.compat['tags/addTagFilter'];","module.exports = flarum.core.compat['tags/addTagLabels'];","module.exports = flarum.core.compat['tags/addTagControl'];","module.exports = flarum.core.compat['tags/addTagComposer'];","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","import { extend } from \"flarum/extend\";\nimport Page from \"flarum/components/Page\";\nimport ItemList from \"flarum/utils/ItemList\";\nimport listItems from \"flarum/helpers/listItems\";\nimport DiscussionList from \"flarum/components/DiscussionList\";\nimport WelcomeHero from \"flarum/components/WelcomeHero\";\nimport DiscussionComposer from \"flarum/components/DiscussionComposer\";\nimport LogInModal from \"flarum/components/LogInModal\";\nimport DiscussionPage from \"flarum/components/DiscussionPage\";\nimport Dropdown from \"flarum/components/Dropdown\";\nimport Button from \"flarum/components/Button\";\nimport LinkButton from \"flarum/components/LinkButton\";\nimport SelectDropdown from \"flarum/components/SelectDropdown\";\nimport IndexPage from \"flarum/components/IndexPage\";\n\n/**\n * The `IndexPage` component displays the index page, including the welcome\n * hero, the sidebar, and the discussion list.\n */\nexport default class ScorePage extends Page {\n  currentTag() {\n    console.log(\"what\");\n    return app.store.getBy(\"tags\", \"slug\", \"SCF\");\n  }\n  init() {\n    super.init();\n\n    // If the user is returning from a discussion page, then take note of which\n    // discussion they have just visited. After the view is rendered, we will\n    // scroll down so that this discussion is in view.\n    if (app.previous instanceof DiscussionPage) {\n      this.lastDiscussion = app.previous.discussion;\n    }\n\n    // If the user is coming from the discussion list, then they have either\n    // just switched one of the parameters (filter, sort, search) or they\n    // probably want to refresh the results. We will clear the discussion list\n    // cache so that results are reloaded.\n    if (app.previous instanceof IndexPage) {\n      app.cache.discussionList = null;\n    }\n\n    const params = this.params();\n\n    if (app.cache.discussionList) {\n      // Compare the requested parameters (sort, search query) to the ones that\n      // are currently present in the cached discussion list. If they differ, we\n      // will clear the cache and set up a new discussion list component with\n      // the new parameters.\n      Object.keys(params).some(key => {\n        if (app.cache.discussionList.props.params[key] !== params[key]) {\n          app.cache.discussionList = null;\n          return true;\n        }\n      });\n    }\n\n    if (!app.cache.discussionList) {\n      app.cache.discussionList = new DiscussionList({ params });\n    }\n\n    app.history.push(\n      \"index\",\n      app.translator.trans(\"core.forum.header.back_to_index_tooltip\")\n    );\n\n    this.bodyClass = \"App--index\";\n  }\n\n  onunload() {\n    // Save the scroll position so we can restore it when we return to the\n    // discussion list.\n    app.cache.scrollTop = $(window).scrollTop();\n  }\n\n  view() {\n    return (\n      <div className=\"IndexPage\">\n        {this.hero()}\n        <div className=\"container\">\n          <div className=\"sideNavContainer\">\n            <nav className=\"IndexPage-nav sideNav\">\n              <ul>{listItems(this.sidebarItems().toArray())}</ul>\n            </nav>\n            <div className=\"IndexPage-results sideNavOffset\">\n              <div className=\"IndexPage-toolbar\">\n                <ul className=\"IndexPage-toolbar-view\">\n                  {listItems(this.viewItems().toArray())}\n                </ul>\n                <ul className=\"IndexPage-toolbar-action\">\n                  {listItems(this.actionItems().toArray())}\n                </ul>\n              </div>\n              {app.cache.discussionList.render()}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  config(isInitialized, context) {\n    super.config(...arguments);\n\n    if (isInitialized) return;\n\n    extend(context, \"onunload\", () => $(\"#app\").css(\"min-height\", \"\"));\n\n    app.setTitle(\"\");\n    app.setTitleCount(0);\n\n    // Work out the difference between the height of this hero and that of the\n    // previous hero. Maintain the same scroll position relative to the bottom\n    // of the hero so that the sidebar doesn't jump around.\n    const oldHeroHeight = app.cache.heroHeight;\n    const heroHeight = (app.cache.heroHeight =\n      this.$(\".Hero\").outerHeight() || 0);\n    const scrollTop = app.cache.scrollTop;\n\n    $(\"#app\").css(\"min-height\", $(window).height() + heroHeight);\n\n    // Scroll to the remembered position. We do this after a short delay so that\n    // it happens after the browser has done its own \"back button\" scrolling,\n    // which isn't right. https://github.com/flarum/core/issues/835\n    const scroll = () =>\n      $(window).scrollTop(scrollTop - oldHeroHeight + heroHeight);\n    scroll();\n    setTimeout(scroll, 1);\n\n    // If we've just returned from a discussion page, then the constructor will\n    // have set the `lastDiscussion` property. If this is the case, we want to\n    // scroll down to that discussion so that it's in view.\n    if (this.lastDiscussion) {\n      const $discussion = this.$(\n        `.DiscussionListItem[data-id=\"${this.lastDiscussion.id()}\"]`\n      );\n\n      if ($discussion.length) {\n        const indexTop = $(\"#header\").outerHeight();\n        const indexBottom = $(window).height();\n        const discussionTop = $discussion.offset().top;\n        const discussionBottom = discussionTop + $discussion.outerHeight();\n\n        if (\n          discussionTop < scrollTop + indexTop ||\n          discussionBottom > scrollTop + indexBottom\n        ) {\n          $(window).scrollTop(discussionTop - indexTop);\n        }\n      }\n    }\n  }\n\n  /**\n   * Get the component to display as the hero.\n   *\n   * @return {MithrilComponent}\n   */\n  hero() {\n    return WelcomeHero.component();\n  }\n\n  /**\n   * Build an item list for the sidebar of the index page. By default this is a\n   * \"New Discussion\" button, and then a DropdownSelect component containing a\n   * list of navigation items.\n   *\n   * @return {ItemList}\n   */\n  sidebarItems() {\n    const items = new ItemList();\n    const canStartDiscussion =\n      app.forum.attribute(\"canStartDiscussion\") || !app.session.user;\n\n    items.add(\n      \"newDiscussion\",\n      Button.component({\n        children: app.translator.trans(\n          canStartDiscussion\n            ? \"core.forum.index.start_discussion_button\"\n            : \"core.forum.index.cannot_start_discussion_button\"\n        ),\n        icon: \"fas fa-edit\",\n        className: \"Button Button--primary IndexPage-newDiscussion\",\n        itemClassName: \"App-primaryControl\",\n        onclick: this.newDiscussionAction.bind(this),\n        disabled: !canStartDiscussion\n      })\n    );\n\n    items.add(\n      \"nav\",\n      SelectDropdown.component({\n        children: this.navItems(this).toArray(),\n        buttonClassName: \"Button\",\n        className: \"App-titleControl\"\n      })\n    );\n\n    return items;\n  }\n\n  /**\n   * Build an item list for the navigation in the sidebar of the index page. By\n   * default this is just the 'All Discussions' link.\n   *\n   * @return {ItemList}\n   */\n  navItems() {\n    const items = new ItemList();\n    const params = this.stickyParams();\n\n    items.add(\n      \"allDiscussions\",\n      LinkButton.component({\n        href: app.route(\"index\", params),\n        children: app.translator.trans(\"core.forum.index.all_discussions_link\"),\n        icon: \"far fa-comments\"\n      }),\n      100\n    );\n\n    return items;\n  }\n\n  /**\n   * Build an item list for the part of the toolbar which is concerned with how\n   * the results are displayed. By default this is just a select box to change\n   * the way discussions are sorted.\n   *\n   * @return {ItemList}\n   */\n  viewItems() {\n    const items = new ItemList();\n    const sortMap = app.cache.discussionList.sortMap();\n\n    const sortOptions = {};\n    for (const i in sortMap) {\n      sortOptions[i] = app.translator.trans(\n        \"core.forum.index_sort.\" + i + \"_button\"\n      );\n    }\n\n    items.add(\n      \"sort\",\n      Dropdown.component({\n        buttonClassName: \"Button\",\n        label:\n          sortOptions[this.params().sort] ||\n          Object.keys(sortMap).map(key => sortOptions[key])[0],\n        children: Object.keys(sortOptions).map(value => {\n          const label = sortOptions[value];\n          const active =\n            (this.params().sort || Object.keys(sortMap)[0]) === value;\n\n          return Button.component({\n            children: label,\n            icon: active ? \"fas fa-check\" : true,\n            onclick: this.changeSort.bind(this, value),\n            active: active\n          });\n        })\n      })\n    );\n\n    return items;\n  }\n\n  /**\n   * Build an item list for the part of the toolbar which is about taking action\n   * on the results. By default this is just a \"mark all as read\" button.\n   *\n   * @return {ItemList}\n   */\n  actionItems() {\n    const items = new ItemList();\n\n    items.add(\n      \"refresh\",\n      Button.component({\n        title: app.translator.trans(\"core.forum.index.refresh_tooltip\"),\n        icon: \"fas fa-sync\",\n        className: \"Button Button--icon\",\n        onclick: () => {\n          app.cache.discussionList.refresh();\n          if (app.session.user) {\n            app.store.find(\"users\", app.session.user.id());\n            m.redraw();\n          }\n        }\n      })\n    );\n\n    if (app.session.user) {\n      items.add(\n        \"markAllAsRead\",\n        Button.component({\n          title: app.translator.trans(\n            \"core.forum.index.mark_all_as_read_tooltip\"\n          ),\n          icon: \"fas fa-check\",\n          className: \"Button Button--icon\",\n          onclick: this.markAllAsRead.bind(this)\n        })\n      );\n    }\n\n    return items;\n  }\n\n  /**\n   * Return the current search query, if any. This is implemented to activate\n   * the search box in the header.\n   *\n   * @see Search\n   * @return {String}\n   */\n  searching() {\n    return this.params().q;\n  }\n\n  /**\n   * Redirect to the index page without a search filter. This is called when the\n   * 'x' is clicked in the search box in the header.\n   *\n   * @see Search\n   */\n  clearSearch() {\n    const params = this.params();\n    delete params.q;\n\n    m.route(app.route(this.props.routeName, params));\n  }\n\n  /**\n   * Redirect to the index page using the given sort parameter.\n   *\n   * @param {String} sort\n   */\n  changeSort(sort) {\n    const params = this.params();\n\n    if (sort === Object.keys(app.cache.discussionList.sortMap())[0]) {\n      delete params.sort;\n    } else {\n      params.sort = sort;\n    }\n\n    m.route(app.route(this.props.routeName, params));\n  }\n\n  /**\n   * Get URL parameters that stick between filter changes.\n   *\n   * @return {Object}\n   */\n  stickyParams() {\n    return {\n      sort: m.route.param(\"sort\"),\n      q: m.route.param(\"q\")\n    };\n  }\n\n  /**\n   * Get parameters to pass to the DiscussionList component.\n   *\n   * @return {Object}\n   */\n  params() {\n    const params = this.stickyParams();\n\n    params.filter = m.route.param(\"filter\");\n\n    return params;\n  }\n\n  /**\n   * Open the composer for a new discussion or prompt the user to login.\n   *\n   * @return {Promise}\n   */\n  newDiscussionAction() {\n    const deferred = m.deferred();\n\n    if (app.session.user) {\n      const component = new DiscussionComposer({ user: app.session.user });\n\n      app.composer.load(component);\n      app.composer.show();\n\n      deferred.resolve(component);\n    } else {\n      deferred.reject();\n\n      app.modal.show(new LogInModal());\n    }\n\n    return deferred.promise;\n  }\n\n  /**\n   * Mark all discussions as read.\n   *\n   * @return void\n   */\n  markAllAsRead() {\n    const confirmation = confirm(\n      app.translator.trans(\"core.forum.index.mark_all_as_read_confirmation\")\n    );\n\n    if (confirmation) {\n      app.session.user.save({ markedAllAsReadAt: new Date() });\n    }\n  }\n}\n","import { extend } from \"flarum/extend\";\n\nimport app from \"flarum/app\";\nimport Model from \"flarum/Model\";\nimport Post from \"flarum/models/Post\";\nimport Discussion from \"flarum/models/Discussion\";\nimport icon from \"flarum/helpers/icon\";\nimport CommentPost from \"flarum/components/CommentPost\";\n\nimport IndexPage from \"flarum/components/IndexPage\";\nimport DiscussionList from \"flarum/components/DiscussionList\";\nimport ScorePage from \"./ScorePage\";\n\nimport Tag from \"flarum/tags/models/Tag\";\nimport DiscussionTaggedPost from \"flarum/tags/components/DiscussionTaggedPost\";\nimport addTagList from \"flarum/tags/addTagList\";\nimport addTagFilter from \"flarum/tags/addTagFilter\";\nimport addTagLabels from \"flarum/tags/addTagLabels\";\nimport addTagControl from \"flarum/tags/addTagControl\";\nimport addTagComposer from \"flarum/tags/addTagComposer\";\n\napp.initializers.add(\"scf-vote-count\", () => {\n  Post.prototype.votes = Model.attribute(\"votes\");\n  Post.prototype.likes = Model.hasMany(\"likes\");\n\n  extend(CommentPost.prototype, \"footerItems\", function(items) {\n    const post = this.props.post;\n    const votes = post.votes();\n\n    if (votes !== undefined) {\n      items.add(\n        \"scf-voted\",\n        <div className=\"Post-votes\">\n          {icon(\"fas fa-poll\")}\n          <span>Eligible votes: {votes}</span>\n        </div>\n      );\n    }\n  });\n});\n\napp.initializers.add(\"view-of-scf-tag-page\", () => {\n  extend(DiscussionList.prototype, \"requestParams\", function(params) {\n    if (this.props.params.tags && this.props.params.tags === \"SCF\") {\n      // Show 50 results only on the SCF tag\n      Object.defineProperty(params, \"_page\", {\n        value: { size: 50 },\n        writable: true,\n        enumerable: false\n      });\n\n      Object.defineProperty(params, \"page\", {\n        get: function() {\n          return this._page;\n        },\n        set: function(newPage) {\n          Object.assign(this._page, newPage);\n        },\n        enumerable: true\n      });\n    }\n  });\n\n  // app.routes.scf = {\n  //   path: \"/t/SCF\",\n  //   component: ScorePage.component({ tags: \"SCF\" })\n  // };\n  // app.postComponents.discussionTagged = DiscussionTaggedPost;\n  // app.store.models.tags = Tag;\n  // // As we are changing a foundamental page we need to hack a bit around\n  // const tempIndexPagePrototype = IndexPage.prototype;\n  // IndexPage.prototype = ScorePage.prototype;\n  // addTagList();\n  // addTagFilter();\n  // addTagLabels();\n  // addTagControl();\n  // addTagComposer();\n  // IndexPage.prototype = tempIndexPagePrototype;\n});\n"],"sourceRoot":""}